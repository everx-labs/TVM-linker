	.internal-alias :main_external,     -1
	.internal-alias :main_internal,     0
	.internal-alias :general_purpose,   1
	.internal-alias :encode_grams,      2
	.internal-alias :parse_grams,       3
	.internal-alias :build_internal_outbound_message,       4

    .selector
    ; s0 - func_id
    ; s1.. - other data
    SETCP0
	ACCEPT
    PUSHREFSLICE        ; dictionary of methods in first reference
	PLDDICT
    OVER
    NEQINT 1
    PUSHCONT {          ; if func_id negative or zero - direct call to method
        PUSHINT 32
        LOGSTR selector_jmp_0
        DICTIGETJMP     ; execute method and return
    }
    PUSHCONT {          ; get dictionary with methods
        PUSHINT 32
        DICTIGETREF
        THROWIFNOT 52   ; no dictionary of methods
        PUSHINT 32
        LOGSTR selector_jmp
        DICTUGETJMP     ; execute method and return
        THROW 51
    }
    IFELSE


	.internal   :encode_grams
	;s0 - value: integer (u64)
	;s1 - builder
	DUP
	PUSHCONT {
		DUP
		UBITSIZE    ; bit count used by integer
		PUSHINT 8
		DIVC        ; calculate number of bytes needed for integer
		DUP
		PUSH s3     ; push builder
		STU 4       ; store len (bytes)
		SWAP
		PUSHINT 8
		MUL         ; calculate bits for integer (rounded to byte)
		STUX        ; store value
		NIP
	}
	PUSHCONT {
		DROP
		PUSHINT 0
		STUR 4
	}
	IFELSE


	.internal :build_internal_outbound_message
	; build internal outbound message
	; s0 - ihr_disabled: integer (1 or 0)
	; s1 - bounce: integer (1 or 0)
	; s2 - src address : slice (MsgAddressInt)
	; s3 - dst address : slice (MsgAddressInt)
	; s4 - value: integer
	; s5 - ihr_fee: integer
	; s6 - fwd_fee: integer
	; s7 - logical time: integer (u64)
	; s8 - unixtime: integer (u32)
	; s9 - body: slice
	; returns: msg: cell
	NEWC
	STSLICECONST 0 ; int_msg_info$0
	STU 1 ; ihr_disabled
	STU 1 ; bounce
	STSLICECONST 0 ; bounced
	STSLICE
	STSLICE
	SWAP

	;s0 - value: integer (u64)
	;s1 - builder
	CALL $:encode_grams$

	STSLICECONST 0

	SWAP

	;s0 - value: integer (u64)
	;s1 - builder
	CALL $:encode_grams$
	; store ihr_fee
	SWAP

	;s0 - value: integer (u64)
	;s1 - builder
	CALL $:encode_grams$
	; store fwd_fee
	STU 64        ; store logical time
	STU 32        ; store unixtime

	STSLICECONST 0 ; (Maybe StateInit) to 0bit
	STSLICECONST 0 ; (body Either) to left$0
	STSLICE       ; store body
	ENDC


	.internal   :parse_grams
	;parses Grams type (VarInteger 16)
	;args: s0 - slice
	; ret:
	;   s0 - remaining slice
	;   s1 - grams: slice
	;starts with 4bit length field
	LDU 4
	SWAP
	DUP
	; load 'value' len*8 bits if len != 0, otherwise 0
	PUSHCONT {
		PUSHINT 8
		MUL
		LDUX
		SWAP
	}
	PUSHCONT {
		DROP
		PUSHINT 0
	}
	IFELSE
	;restore it as u128 integer
	NEWC
	STU 128
	ENDC
	CTOS
	SWAP


	.globl	parse_currency_collection
	.type	parse_currency_collection, @function
	;parses CurrencyCollection type
	;args: s0 - slice
	;ret:
	;   s0 - remaining slice
	;   s1 - grams: slice
	CALL $:parse_grams$
	; skip HashmapE with currencies.
	SKIPDICT

	.globl	parse_smartcontractinfo
	.type	parse_smartcontractinfo, @function
	;; stack=0
	LOGSTR parse_continfo
	NOW		; put unixtime field on stack
	BLOCKLT ; put block_lt field on stack
	LTIME	; put trans_lt field on stack
	PUSHCTR c7
	FIRST
	INDEX 6 ; put rand_seed field on stack
	PUSHCTR c7
	FIRST
	INDEX 7 ; put balance remaining on stack
	FIRST	; put nanograms integer
	NEWC STU 128 ENDC CTOS

	; parse MsgAddressInt
	PUSHCTR c7
	FIRST
	INDEX 8
	PUSHINT 11 
	SDSKIPFIRST ; skip anycast: + workchain_id
	LDU 256 ; put address on stack
	DROP
	
	; s0 - address
	; s1 - balance
	; s2 - rand_seed
	; s3 - trans_lt
	; s4 - block_lt
	; s5 - unixtime
	RET

	.globl		get_address
	.type		get_address, @function
	;; stack=0
	LOGSTR get_address
	
	PUSHCTR c7
	FIRST
	INDEX 8
	LDREF
	PUSHINT 11 
	SDSKIPFIRST ; skip anycast: + workchain_id
	LDU 256
	DROP
	RET
	
	.globl		get_balance
	.type		get_balance, @function
	;; stack=0
	LOGSTR get_balance
	PUSHCTR c7
	FIRST
	INDEX 7
	FIRST
	RET
	
	.globl		get_rand_seed
	.type		get_rand_seed, @function
	;; stack=0
	LOGSTR get_rand_seed
	PUSH c7
	FIRST
	INDEX 6
	RET
	
	.globl		get_trans_lt
	.type		get_trans_lt, @function
	;; stack=0
	LOGSTR get_trans_lt
	LTIME
	RET
	
	.globl		get_block_lt
	.type		get_block_lt, @function
	;; stack=0
	LOGSTR get_block_lt
	BLOCKLT
	RET
	
	.globl		get_unixtime
	.type		get_unixtime, @function
	;; stack=0
	LOGSTR get_unixtime
	NOW
	RET

    .globl	get_msg_pubkey
	.type	get_msg_pubkey, @function
	; s0 - msg body: slice
	; Returns 0 if message is not signed
	; Returns sender's pubkey if signature is valid
	; Throws exception 40 if signature is invalid
	DUP
	LOGSTR get_msg_pubkey
	SREMPTY
	PUSHCONT {
		DROP
		PUSHINT 0
	}
	PUSHCONT {
		;;;; Checks the signature of a given message and returns sender's public key
		;;;; Throws exception 40 if signature is invalid
		
		; stack: msg
		ZERO SWAP
		; stack: 0 msg
		LDREFRTOS
		;check if it's empty
		DUP
		SDEMPTY
		PUSHCONT {
			; signature slice is empty
			; clean the stack and return 0
			BLKDROP 2
		}
		IFJMP
		; stack: 0 msg' slice:sign+pubKey
		DUP
		; stack: 0 msg' slice:sign+pubKey slice:sign+pubKey
		PUSHINT 512
		SDSKIPFIRST
		LDU 256
		DROP
		; stack: 0 msg' slice:sign+pubKey pubKey
		DUP
		; stack: 0 msg' slice:sign+pubKey pubKey pubKey
		POP s4
		; stack: pubKey msg' slice:sign+pubKey pubKey
		ROT
		; stack: pubKey slice:sign+pubKey pubKey msg' 
		HASHSU
		; stack: pubKey slice:sign+pubKey pubKey msg-hash
		ROTREV
		; stack: pubKey msg-hash slice:sign+pubKey pubKey
		CHKSIGNU
		THROWIFNOT 40
		; stack: pubKey
	}
	IFELSE
	RET
	
	.internal   :main_external
	; s0 - msg body: slice
	; s1 - msg: cell
	; s2 - gram balance of msg: int
	; s3 - gram balance of contract: int
	LOGSTR main_external
	PUSH s3
	PUSH s3
	; s0 - gram balance of msg: int
	; s1 - gram balance of contract: int
	; s2 - msg body: slice
	; s3 - msg: cell
	; s4 - gram balance of msg: int
	; s5 - gram balance of contract: int
	
	PUSH s3
	PUSHINT $get_src_addr$
	CALL 1
	POP s4
	XCHG s2, s3
	XCHG s1, s2
	XCHG s0, s1
	; s0 - addr
	; s1 - gram balance of msg: int
	; s2 - gram balance of contract: int
	; s3 - msg body: slice
	; s4 - gram balance of msg: int
	; s5 - gram balance of contract: int
	
	PUSH s3
	PUSHINT $get_msg_pubkey$
	CALL 1
	; s0 - pubkey
	; s1 - addr
	; s2 - gram balance of msg: int
	; s3 - gram balance of contract: int
	; s4 - msg body: slice
	; s5 - gram balance of msg: int
	; s6 - gram balance of contract: int
	
	PUSHINT $store_signature$
	CALL 1
	NIP
	NIP
	
	; s0 - msg body: slice
	
	; check if message is empty
	DUP
	SDEMPTY
	PUSHCONT {
		DROP
		NEWDICT
		NEWC STDICT ENDC
		POPROOT
		RET
	}
	IFJMP
    
    ;parse ABI version (1 byte) and load function id (4 bytes)
    LDU 8       ;load ABI version
    SWAP  
    THROWIF 55  ; only version 0 is supported now
    LDU 32      ;load func id
    SWAP
    CALL 1      ;public method call


	.globl		get_src_addr
	.type		get_src_addr, @function
	; s0 - msg: cell
	LOGSTR get_src_addr
	CTOS
	LDU 1
	SWAP
	PUSHCONT {
		DROP
		PUSHINT 0
		RET
	}
	IFJMP
	
	PUSHINT 3
	SDSKIPFIRST ; skip ihr_disabled + bounce + bounced
	
	;; here we parse src : MsgIntAddress
	
	PUSHINT 11
	SDSKIPFIRST ; skip anycast: + workchain_id
	LDU 256
	DROP ; drop slice itself
	RET


	.globl		store_signature
	.type		store_signature, @function
	; stack: sign
	LOGSTR store_signature
	
	NEWC
	ENDC

	; stack: sign SmartContractInfo(CELL)
	NEWC
	; stack: sign SmartContractInfo b
	STREF
	; stack: sign b' in dict for key 0
	SWAP
	NEWC STU 256 ENDC CTOS
	PUSHINT 0
	NEWDICT
	PUSHINT 8
	DICTUSET
	; stack: src addr b'' in dict for key 1
	ROT
	NEWC STU 256 ENDC CTOS
	PUSHINT 1
	PUSH s2
	PUSHINT 8
	DICTUSET
	NIP
	; stack: msg balance b''' in dict for key 2
	ROT
	NEWC STU 256 ENDC CTOS
	PUSHINT 2
	PUSH s2
	PUSHINT 8
	DICTUSET
	NIP
	; stack: gram balance of contract b'''' in dict for key 3
	ROT
	NEWC STU 256 ENDC CTOS
	PUSHINT 3
	PUSH s2
	PUSHINT 8
	DICTUSET
	NIP
	PUSHINT $parse_smartcontractinfo$
	CALL 1 ; get additional values from smartcontractinfo
	; s0 - address
	; s1 - balance
	; s2 - rand_seed
	; s3 - trans_lt
	; s4 - block_lt
	; s5 - unixtime
	; s6 - dict
	; put address into dict for key 4
	NEWC STU 256 ENDC CTOS
	PUSHINT 4
	PUSH s7
	PUSHINT 8
	DICTUSET
	; put balance into dict for key 5
	SWAP
	PUSHINT 5
	PUSH s2
	PUSHINT 8
	DICTUSET
	NIP
	; put rand_seed into dict for key 6
	SWAP
	NEWC STU 256 ENDC CTOS
	PUSHINT 6
	PUSH s2
	PUSHINT 8
	DICTUSET
	NIP
	; put trans_lt into dict for key 7
	SWAP
	NEWC STU 64 ENDC CTOS
	PUSHINT 7
	PUSH s2
	PUSHINT 8
	DICTUSET
	NIP
	; put block_lt into dict for key 8
	SWAP
	NEWC STU 64 ENDC CTOS
	PUSHINT 8
	PUSH s2
	PUSHINT 8
	DICTUSET
	NIP
	; put unixtime into dict for key 9
	SWAP
	NEWC STU 32 ENDC CTOS
	PUSHINT 9
	PUSH s2
	PUSHINT 8
	DICTUSET
	NIP
	NIP ; drop old dict which was at s6 at start of adding smartcontractinfo
	; stack: dict with values
	SWAP
	STDICT
	ENDC
	PUSHCTR c7
	SWAP
	TPUSH
	POP c7
	RET

    .internal   :main_internal
    ; s0 - msg body: slice
    ; s1 - msg: cell
    ; s2 - gram balance of msg: int
    ; s3 - gram balance of contract: int
	LOGSTR main_internal
	PUSH s3
	PUSH s3
	; s0 - gram balance of msg: int
	; s1 - gram balance of contract: int
	; s2 - msg body: slice
	; s3 - msg: cell
	; s4 - gram balance of msg: int
	; s5 - gram balance of contract: int
	
	PUSH s3
	PUSHINT $get_src_addr$
	CALL 1
	POP s4
	XCHG s2, s3
	XCHG s1, s2
	XCHG s0, s1
	; s0 - addr
	; s1 - gram balance of msg: int
	; s2 - gram balance of contract: int
	; s3 - msg body: slice
	; s4 - gram balance of msg: int
	; s5 - gram balance of contract: int
	
	PUSHINT 0 ; put 0 instead of signature
	; s0 - 0 as signature
	; s1 - addr
	; s2 - gram balance of msg: int
	; s3 - gram balance of contract: int
	; s4 - msg body: slice
	; s5 - gram balance of msg: int
	; s6 - gram balance of contract: int
	
	PUSHINT $store_signature$
	CALL 1
	NIP
	NIP
	
    ; s0 - msg body: slice
	
	; protection against empty message
	DUP
	SEMPTY
	IFRET
    
    ;parse ABI version (1 byte) and load function id (4 bytes)
    LDU 8       ;load ABI version
    SWAP  
    THROWIF 55  ; only version 0 is supported now
    LDU 32      ;load func id
    SWAP
    CALL 1      ;public method call

    RET

	.globl	send_grams
	.type	send_grams, @function
		;args:
		;; s0 - body: slice
		;; s1 - dst account address: integer
		;; s2 - transfer grams value: integer
		;ret: none
		LOGSTR send_grams
		PUSHINT 0	;; next msg logical time
		PUSH s1	;; body: slice
		PUSH s3	;; dst account address: integer
		PUSH s5	;; transfer grams value: integer
		PUSHINT $send_int_msg$
		CALL 1
		
		POP s1
		POP s1
		POP s1
		RET

	.globl	send_int_msg_2
	.type	send_int_msg_2, @function
		;args: 
		; s0 - body: slice
		; s1 - dst account address: integer
		;ret: none
		
		PUSHINT 0	;; next msg logical time
		PUSH s1		;; body: slice
		PUSH s3		;; dst account address: integer
		PUSHINT 10000	;; transfer grams value: integer
		
		PUSHINT $send_int_msg$
;		RET
		CALL 1
		
		POP s1
		POP s1
		RET
	
	.globl	send_int_msg
	.type	send_int_msg, @function
	;; taken from TON-Wallet
			;args: 
			; s0 - transfer grams value: integer
			; s1 - dst account address: integer
			; s2 - body: slice
			; s3 - next msg logical time
			;ret: none

			SWAP
					
			;args: s0 - address: integer u256
			;ret: s0 - slice
				NEWC
				;tag$10 + $0 (anycast is NULL) + $00000000 (workchain_id 0i8)
				STSLICECONST x801_
;				STSLICECONST x9FF_
				STU 256
				ENDC
				CTOS
					; load SmartContractInfo 
					NOW			; unixtime		
					PUSHINT 0   ; push msg lt
					PUSHCTR c7
					FIRST
					INDEX 8

					; s0 - myself: MsgAddressInt (slice) 
					; s1 - trans_lt: u64
					; s2 - tr unixtime: u32
					; s3 - transfer grams value: integer
					; s4 - dst account address: integer
					; s5 - body: slice
					ROTREV
					PUSHINT 0   ; fwd_fee
					PUSHINT 0   ; ihr_fee
					BLKSWAP 3, 4

					;stack trace:
					; s0 - myself: MsgAddressInt (slice) 
					; s1 - dst account address: integer
					; s2 - transfer grams value: integer
					; s3 - ihr_fee
					; s4 - fwd_fee
					; s5 - trans_lt: u64
					; s6 - tr unixtime: u32
					; s7 - body: slice

					PUSHINT 1   ; bounce flag
					PUSHINT 0   ; reset ihr_disabled flag
					
					CALL $:build_internal_outbound_message$
					PUSHINT 0
					SENDRAWMSG
					
				PUSHINT 123
				DROP
				RET



	.globl   build_external_outbound_message
	.type	 build_external_outbound_message, @function
	; build external outbound message
	; s0 - src address : MsgAddressInt
	; s1 - logical time
	; s2 - body
	; returns: msg: cell

	NEWC
	TWO
	STONES ; ext_out_msg_info$11

	STSLICE ; store MsgAddressInt

	TWO
	STZEROES ; addr_none$00

	STU 64  ; created_lt:uint64
	PUSHINT 0
	STUR 32  ; created_at:uint32

	ONE
	STZEROES   ; Maybe StateInit to 0bit

	;check that the result builder can fit
	;body slice
	DUP2
	BREMBITS
	SWAP
	SBITS
	INC         ;include body either bit
	GEQ
	PUSHCONT {
		;builder has enough free bits,
		;just append body slice to builder
		ONE
		STZEROES  ;body Either: left$0
		STSLICE
	}
	PUSHCONT {
		;builder's remaining bits are not enough
		;to append body slice, instead append bit 1
		;and attach body as reference.
		ONE
		STONES   ;body Either: right$1
		SWAP
		;body is a slice, and we need to convert
		;it to cell before storing as reference.
		NEWC
		STSLICE
		ENDC
		STREFR
	}
	IFELSE

	ENDC



	.globl   send_ext_msg
	.type    send_ext_msg, @function
	;args: s0 - body: slice
	;ret: none
	; load SmartContractInfo
	LTIME
	PUSHCTR c7
	FIRST
	INDEX 8
	; s0 - myself: MsgAddressInt (slice)
	; s1 - trans_lt: u64
	PUSHINT $build_external_outbound_message$
	CALL 1
	PUSHINT 0
	SENDRAWMSG


	.globl	decode_array
	.type	decode_array, @function
	
	; Decode array of numbers of given number of bits
	; args: 
	;   s0 - numBits (integer) - lenght of array's values
	;   s1 - sl (slice) - encoded array
	; ret:
	;   s0 - remaining slice
	;   s1 - dict represented decoded array

	; Stucture of encoded array
	; 2 bits put in the cell-data define serialization algorithm.
	; [00] - array is put into a separate cell. In case of array overflowing the maximum cell-data size it's split into multiple sequential cells.
	; [10] - bits sequence is put in the cell-data. The next 8 bits (1 byte) define the number of elements of the array. It's followed by the sequence of encoded array elements.
	; [01]/[11] - reserved.

	; stacktrace: sl numBits
	SWAP  ; stacktrace: numBits sl
	LDU 2 ; stacktrace: numBits algo sl
	SWAP  ; stacktrace: numBits sl algo

	DUP
	PUSHINT 0
	EQUAL

	PUSHCONT { ; [00] serialization algorithm
		DROP

		; TODO
		THROW 11 ; unsupported serialization algorithm
	}
	PUSHCONT {
		DUP
		PUSHINT 2
		EQUAL

		PUSHCONT { ; [10] serialization algorithm
			DROP

			LDU 8 ; load number of elements of the array
			SWAP
			; stacktrace: numBits sl arrSz

			NEWDICT
			PUSHINT 0
			; stacktrace: numBits sl arrSz arr key

			PUSH s2
			; stacktrace: numBits sl arrSz arr key arrSz
			PUSHCONT {
				; stacktrace: numBits sl arrSz arr key

				PUSH2 s3, s4
				; stacktrace: numBits sl arrSz arr key sl numBits

				LDSLICEX
				; stacktrace: numBits sl arrSz arr key arrValue sl

				XCHG s0, s5
				DROP
				; stacktrace: numBits sl arrSz arr key arrValue

				PUSH2 s1, s2
				PUSHINT 32
				; stacktrace: numBits sl arrSz arr key arrValue key arr 32

				DICTUSET
				; stacktrace: numBits sl arrSz arr key arr

				XCHG s0, s2
				DROP
				; stacktrace: numBits sl arrSz arr key

				INC
				; stacktrace: numBits sl arrSz arr key
			}
			REPEAT

			; stacktrace: numBits sl arrSz arr key
			XCHG s1, s4
			; stacktrace: arr sl arrSz numBits key
			BLKDROP 3
			; stacktrace: arr sl
		}
		PUSHCONT {
			THROW 11 ; unsupported serialization algorithm
		}
		IFELSE
	}
	IFELSE

	RET


	.globl	encode_array
	.type	encode_array, @function

	; serialization of array of numbers of given number of bits
	; args:
	;   s0 - length of values of array
	;   s1 - dict represented array
	;   s2 - builder for storing array
	; ret:
	;   s0 - builder

	; TODO
	RET


	.globl		get_contract_balance
	.type		get_contract_balance, @function
	;; stack=0
	LOGSTR get_cnt_balance
	PUSHCTR c7
	FIRST
	INDEX 7
	FIRST
	RET

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;; THE CODE BELOW IS GENERATED. DO NOT CHANGE IT!	


.globl	get_pubkey
.type	get_pubkey, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: get_pubkey
;; get member pubkey
;; TvmTempData.pubkey
PUSHINT 0
;; tvm_get_tmp_dictionary
;; stack=1
PUSH c7
SECOND
CTOS
PLDDICT
PUSHINT 8
DICTUGET
PUSHCONT { LDU 256 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
;; return
RET

.globl	get_msg_sender
.type	get_msg_sender, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: get_msg_sender
;; get member msgSender
;; TvmTempData.msgSender
PUSHINT 1
;; tvm_get_tmp_dictionary
;; stack=1
PUSH c7
SECOND
CTOS
PLDDICT
PUSHINT 8
DICTUGET
PUSHCONT { LDU 256 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
;; return
RET

.globl	get_msg_balance
.type	get_msg_balance, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: get_msg_balance
;; get member msgBalance
;; TvmTempData.msgBalance
PUSHINT 2
;; tvm_get_tmp_dictionary
;; stack=1
PUSH c7
SECOND
CTOS
PLDDICT
PUSHINT 8
DICTUGET
PUSHCONT { LDU 256 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
;; return
RET
