.globl	constructor_Test28
.type	constructor_Test28, @function
RET

.globl	constructor
.public	constructor
.type	constructor, @function
PRINTSTR constr_prot_0
PUSHINT 0
;; decl: dict
PUSHINT 0
;; decl: previous_message_timestamp
PUSHINT 1800000
;; decl: interval
PUSHROOT
CTOS
;; decl: c4
;; c4
;; stack=4
DUP
LDDICT
POP s2
;; assign dict
POP s4
;; if
;; c4
;; stack=4
DUP
PUSHINT 128
SCHKBITSQ
PUSHCONT {
	;; c4
	;; stack=4
	DUP
	LDI 64
	POP s2
	;; assign previous_message_timestamp
	POP s3
	;; c4
	;; stack=4
	DUP
	LDI 64
	POP s2
	;; assign interval
	POP s2
	;; if
	;; c4
	;; stack=4
	DUP
	PUSHINT 1
	SCHKBITSQ
	PUSHCONT {
		PUSHINT 123
		THROWANY
	}
	IF
}
IF
NEWC
;; decl: c4_builder
;; dict
;; stack=5
PUSH s4
SWAP
STDICT
;; previous_message_timestamp
;; stack=5
PUSH s3
STUR 64
;; interval
;; stack=5
PUSH s2
STUR 64
PUSHINT 1
STONES
;; c4
;; stack=5
PUSH s1
STSLICER
;; c4_builder
;; stack=5
DUP
ENDC
POPROOT
PRINTSTR constr_prot_1
BLKDROP 5
ACCEPT
; Decode input parameters
DROP
PRINTSTR pushpdc7toc4
PUSHROOT
CTOS
;; decl: c4
SKIPDICT
NEWC
;; decl: c4_builder
PUSHCTR c7
THIRD
SWAP
STDICT
;; c4
;; stack=2
PUSH s1
STSLICER
;; c4_builder
;; stack=2
DUP
ENDC
POPROOT
PRINTSTR pushpdc7toc40
BLKDROP 2

.globl	main
.public	main
.type	main, @function
; Decode input parameters
PUSHINT 16
CALL $smart_ldu$
PUSHINT 16
CALL $smart_ldu$
DROP
CALL $main_internal$
;; emitting 1 value(s)
NEWC
PUSHINT $main$
PUSHINT 2147483648
OR
STUR 32
NEWC
PUSH s2
STUR 256
STBREFR
CALL $send_ext_msg$
PRINTSTR pushpdc7toc4
PUSHROOT
CTOS
;; decl: c4
SKIPDICT
NEWC
;; decl: c4_builder
PUSHCTR c7
THIRD
SWAP
STDICT
;; c4
;; stack=2
PUSH s1
STSLICER
;; c4_builder
;; stack=2
DUP
ENDC
POPROOT
PRINTSTR pushpdc7toc40
BLKDROP 2
RET

.globl	main_internal
.type	main_internal, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: starting_len
;; param: new_len
NEWDICT
NEWC STDICT ENDC
POPROOT
; for statement
PUSHINT 0
;; decl: i
PUSHCONT {
	;; i
	;; stack=3
	DUP
	;; starting_len
	;; stack=4
	PUSH s3
	;; <
	LESS
	NOT DUP IFRET DROP
	;; m_isUntil = 1
	;; fetch arr
	PUSHINT 100
	PUSH c7 THIRD
	PUSHINT 64
	DICTUGETOPTREF
	;; i
	;; stack=4
	PUSH s1
	SWAP
	;; i
	;; stack=5
	PUSH s2
	PUSHINT 1
	;; +
	ADD
	NEWC STU 256
	ROTREV
	PUSHINT 32
	DICTUSETB
	;; assign arr
	PUSHINT 100
	PUSH c7 THIRD
	PUSHINT 64
	DICTUSETGETOPTREF DROP
	PUSH c7
	SWAP
	SETTHIRD
	POP c7
	;; ++
	INC
	FALSE
}
UNTIL
; erase i
DROP
; for end
;; get member length
;; arr
;; stack=2
PUSHINT 100
PUSH c7 THIRD
PUSHINT 64
DICTUGETOPTREF
PUSHINT 32
DICTUMAX
PUSHCONT { POP s1 INC }
PUSHCONT { PUSHINT 0 }
IFELSE
;; starting_len
;; stack=3
PUSH s2
;; ==
EQUAL
THROWIFNOT 100
;; fetch arr
PUSHINT 100
PUSH c7 THIRD
PUSHINT 64
DICTUGETOPTREF
PUSHINT 0
NEWC STU 256
SWAP
;; new_len
;; stack=4
PUSH s2
CALL $change_array_length$
;; assign arr
PUSHINT 100
PUSH c7 THIRD
PUSHINT 64
DICTUSETGETOPTREF DROP
PUSH c7
SWAP
SETTHIRD
POP c7
;; get member length
;; arr
;; stack=2
PUSHINT 100
PUSH c7 THIRD
PUSHINT 64
DICTUGETOPTREF
PUSHINT 32
DICTUMAX
PUSHCONT { POP s1 INC }
PUSHCONT { PUSHINT 0 }
IFELSE
;; new_len
;; stack=3
PUSH s1
;; ==
EQUAL
THROWIFNOT 100
;; if
;; new_len
;; stack=2
DUP
;; starting_len
;; stack=3
PUSH s2
;; <
LESS
PUSHCONT {
	; for statement
	;; new_len
	;; stack=2
	DUP
	;; decl: i
	PUSHCONT {
		;; i
		;; stack=3
		DUP
		;; starting_len
		;; stack=4
		PUSH s3
		;; <
		LESS
		NOT DUP IFRET DROP
		;; m_isUntil = 1
		;; i
		;; stack=3
		DUP
		;; arr
		;; stack=4
		PUSHINT 100
		PUSH c7 THIRD
		PUSHINT 64
		DICTUGETOPTREF
		;; index
		PUSHINT 32
		DICTUGET
		PUSHCONT { LDU 256 ENDS }
		PUSHCONT { PUSHINT 0 }
		IFELSE
		PUSHINT 0
		;; ==
		EQUAL
		THROWIFNOT 100
		;; ++
		INC
		FALSE
	}
	UNTIL
	; erase i
	DROP
	; for end
}
IF
;; get member length
;; arr
;; stack=2
PUSHINT 100
PUSH c7 THIRD
PUSHINT 64
DICTUGETOPTREF
PUSHINT 32
DICTUMAX
PUSHCONT { POP s1 INC }
PUSHCONT { PUSHINT 0 }
IFELSE
;; return
NIP
NIP
RET

.globl	fallback
.type	fallback, @function
DROP
RET

.globl	onBounce
.type	onBounce, @function
DROP
RET

