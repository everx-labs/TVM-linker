
.globl	constructor_external
.type	constructor_external, @function
DROP
PUSHINT $constructor$
CALL 1

.globl	constructor
.type	constructor, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: constructor
NEWDICT
NEWC STDICT ENDC
POPROOT
;; tvm_sender_pubkey
;; stack=0
PUSHINT $get_pubkey$
CALL 1
;; decl: pubkey
;; pubkey
;; stack=1
DUP
PUSHINT 0
;; !=
NEQ
;; require
;; stack=2
THROWIFNOT 100
;; fetch m_roles
PUSHINT 0
PUSHROOT CTOS PLDDICTQ NULLSWAPIFNOT DROP
PUSHINT 256
DICTUGETOPTREF
;; pubkey
;; stack=2
PUSH s1
SWAP
PUSHINT 1
NEWC STU 256 ENDC CTOS
ROTREV
PUSHINT 256
DICTUSET
;; assign m_roles
PUSHINT 0
PUSHROOT CTOS PLDDICTQ NULLSWAPIFNOT DROP
PUSHINT 256
DICTUSETREF
NEWC STDICT ENDC
POPROOT
;; return
DROP
RET

.globl	set_role_external
.type	set_role_external, @function
LDU 8
DROP
PUSHINT $set_role$
CALL 1

.globl	set_role
.type	set_role, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: set_role
;; param: role
;; tvm_sender_pubkey
;; stack=1
PUSHINT $get_pubkey$
CALL 1
;; decl: pubkey
;; pubkey
;; stack=2
DUP
PUSHINT 0
;; !=
NEQ
;; require
;; stack=3
THROWIFNOT 100
;; fetch m_roles
PUSHINT 0
PUSHROOT CTOS PLDDICTQ NULLSWAPIFNOT DROP
PUSHINT 256
DICTUGETOPTREF
;; pubkey
;; stack=3
PUSH s1
SWAP
;; role
;; stack=4
PUSH s3
NEWC STU 256 ENDC CTOS
ROTREV
PUSHINT 256
DICTUSET
;; assign m_roles
PUSHINT 0
PUSHROOT CTOS PLDDICTQ NULLSWAPIFNOT DROP
PUSHINT 256
DICTUSETREF
NEWC STDICT ENDC
POPROOT
;; return
BLKDROP 2
RET

.globl	get_role_external
.type	get_role_external, @function
DROP
PUSHINT $get_role$
CALL 1

.globl	get_role
.type	get_role, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: get_role
;; tvm_sender_pubkey
;; stack=0
PUSHINT $get_pubkey$
CALL 1
;; decl: pubkey
;; pubkey
;; stack=1
DUP
PUSHINT 0
;; !=
NEQ
;; require
;; stack=2
THROWIFNOT 100
;; m_roles
;; stack=1
PUSHINT 0
PUSHROOT CTOS PLDDICTQ NULLSWAPIFNOT DROP
PUSHINT 256
DICTUGETOPTREF
;; pubkey
;; stack=2
PUSH s1
;; index
SWAP
PUSHINT 256
DICTUGET
PUSHCONT { LDU 256 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
;; return
POP s1
RET

.globl	fallback
.type	fallback, @function
DROP
RET
