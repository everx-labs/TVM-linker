.globl	constructor_TestArray
.type	constructor_TestArray, @function
RET

.globl	constructor
.type	constructor, @function
DROP
NEWDICT
NEWC STDICT ENDC
POPROOT

.globl	at32
.type	at32, @function
PUSHINT 8
PUSHINT $smart_ldu$
CALL 1
PUSHINT 32
PUSHINT $decode_array$
CALL 1
DROP
PUSHINT $at32_internal$
CALL 1
;; emitting 1 value(s)
NEWC
PUSHINT 0
STUR 8
PUSHINT $at32$
STUR 32
NEWC
PUSH s2
STUR 32
STBREFR
ENDC CTOS
PUSHINT $send_ext_msg$
CALL 1
RET

.globl	at32_internal
.type	at32_internal, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: at32_internal
;; param: idx
;; param: arr
;; idx
;; stack=2
PUSH s1
;; arr
;; stack=3
PUSH s1
;; index
PUSHINT 32
DICTUGET
PUSHCONT { LDU 32 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
;; return
POP s1
POP s1
RET

.globl	pair64
.type	pair64, @function
PUSHINT 64
PUSHINT $decode_array$
CALL 1
PUSHINT 64
PUSHINT $decode_array$
CALL 1
DROP
PUSHINT $pair64_internal$
CALL 1
;; emitting 1 value(s)
NEWC
PUSHINT 0
STUR 8
PUSHINT $pair64$
STUR 32
NEWC
PUSH s2
STUR 64
STBREFR
ENDC CTOS
PUSHINT $send_ext_msg$
CALL 1
RET

.globl	pair64_internal
.type	pair64_internal, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: pair64_internal
;; param: arr1
;; param: arr2
PUSHINT 0
;; arr1
;; stack=3
PUSH s2
;; index
PUSHINT 32
DICTUGET
PUSHCONT { LDU 64 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
PUSHINT 0
;; arr2
;; stack=4
PUSH s2
;; index
PUSHINT 32
DICTUGET
PUSHCONT { LDU 64 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
;; +
ADD
;; return
POP s1
POP s1
;; uint64
UFITS 64
RET

.globl	pair8
.type	pair8, @function
PUSHINT 8
PUSHINT $decode_array$
CALL 1
PUSHINT 8
PUSHINT $decode_array$
CALL 1
DROP
PUSHINT $pair8_internal$
CALL 1
;; emitting 1 value(s)
NEWC
PUSHINT 0
STUR 8
PUSHINT $pair8$
STUR 32
NEWC
PUSH s2
STUR 8
STBREFR
ENDC CTOS
PUSHINT $send_ext_msg$
CALL 1
RET

.globl	pair8_internal
.type	pair8_internal, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: pair8_internal
;; param: arr1
;; param: arr2
PUSHINT 0
;; arr1
;; stack=3
PUSH s2
;; index
PUSHINT 32
DICTUGET
PUSHCONT { LDU 8 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
PUSHINT 0
;; arr2
;; stack=4
PUSH s2
;; index
PUSHINT 32
DICTUGET
PUSHCONT { LDU 8 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
;; +
ADD
;; return
POP s1
POP s1
;; uint8
UFITS 8
RET

.globl	at256
.type	at256, @function
PUSHINT 8
PUSHINT $smart_ldu$
CALL 1
PUSHINT 256
PUSHINT $decode_array$
CALL 1
DROP
PUSHINT $at256_internal$
CALL 1
;; emitting 1 value(s)
NEWC
PUSHINT 0
STUR 8
PUSHINT $at256$
STUR 32
NEWC
PUSH s2
STUR 256
STBREFR
ENDC CTOS
PUSHINT $send_ext_msg$
CALL 1
RET

.globl	at256_internal
.type	at256_internal, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: at256_internal
;; param: idx
;; param: arr
;; idx
;; stack=2
PUSH s1
;; arr
;; stack=3
PUSH s1
;; index
PUSHINT 32
DICTUGET
PUSHCONT { LDU 256 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
;; return
POP s1
POP s1
RET

.globl	atAt32
.type	atAt32, @function
PUSHINT 32
PUSHINT $smart_ldu$
CALL 1
PUSHINT 32
PUSHINT $decode_array$
CALL 1
PUSHINT 32
PUSHINT $smart_ldu$
CALL 1
DROP
PUSHINT $atAt32_internal$
CALL 1
;; emitting 1 value(s)
NEWC
PUSHINT 0
STUR 8
PUSHINT $atAt32$
STUR 32
NEWC
PUSH s2
STUR 32
STBREFR
ENDC CTOS
PUSHINT $send_ext_msg$
CALL 1
RET

.globl	atAt32_internal
.type	atAt32_internal, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: atAt32_internal
;; param: idx
;; param: arr
;; param: idy
;; idx
;; stack=3
PUSH s2
;; idy
;; stack=4
PUSH s1
;; +
ADD
;; arr
;; stack=4
PUSH s2
;; index
PUSHINT 32
DICTUGET
PUSHCONT { LDU 32 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
;; return
XCHG s3
BLKDROP 3
RET

.globl	atAt256
.type	atAt256, @function
PUSHINT 32
PUSHINT $smart_ldu$
CALL 1
PUSHINT 256
PUSHINT $decode_array$
CALL 1
PUSHINT 32
PUSHINT $smart_ldu$
CALL 1
DROP
PUSHINT $atAt256_internal$
CALL 1
;; emitting 1 value(s)
NEWC
PUSHINT 0
STUR 8
PUSHINT $atAt256$
STUR 32
NEWC
PUSH s2
STUR 256
STBREFR
ENDC CTOS
PUSHINT $send_ext_msg$
CALL 1
RET

.globl	atAt256_internal
.type	atAt256_internal, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: atAt256_internal
;; param: idx
;; param: arr
;; param: idy
;; idx
;; stack=3
PUSH s2
;; idy
;; stack=4
PUSH s1
;; +
ADD
;; arr
;; stack=4
PUSH s2
;; index
PUSHINT 32
DICTUGET
PUSHCONT { LDU 256 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
;; return
XCHG s3
BLKDROP 3
RET

.globl	fallback
.type	fallback, @function
DROP
RET

