	.internal-alias :main_external,     -1
	.internal-alias :main_internal,     0
	.internal-alias :switch_selector,   1
	.internal-alias :authenticate,      2
	.internal-alias :parse_msg,         3
    .internal-alias :parse_internal_msg, 4
    .internal-alias :init_stack,        5

    .global-base        0
    .persistent-base    1000000

	.selector
	;s0 - selector
	;s1 - ...
	SETCP0
	DUP
    EQINT 1
	DICTPUSHCONST 32
    ROT
	PUSHCONT {
        DICTIGETJMP
	}
	IFNOTJMP
    PUSHREFCONT
	POPCTR c3
	ROT 
    DROP
	DICTIGETJMP
    
    .internal   :authenticate
    ;ref0 must contains auth dictionary
    ;args: 
    ;   s0 - body slice
    ;ret: 
    ;   s0 - body slice (modified: without ref0)
    ;throws exception if signature cell is missing
    ;throws exception if signature is invalid

    DUP
    SREMPTY         ;body must have reference, if not - throw exception
    THROWIF 40      ;signature cell not found 
    LDREFRTOS       ;detach signature slice
    DUP
    SEMPTY
    PUSHCONT {
        DROP
    }
    IFJMP
    OVER
    HASHSU
    SWAP
    PUSHINT 512
    LDSLICEX
    LDU 256
    DROP
    ;DUP
    ;store sender key in global dictionary
    CHKSIGNU
    THROWIFNOT 40   ;access denied exception
    RET

    .internal   :init_stack
    ;1) get global data dict from persistent dict(c4) with key 8
    ;2) get SmartContractInfo slice from c7.0 
    ;3) set SmartContractInfo slice to global data dictionary at key 'global-base'
    ;4) put global data dictionary to the register c7.1 as cell.
    PUSHINT $global-base$    
    PUSHINT $persistent-base$
    ADDCONST 8
    PUSHROOT
    CTOS
    PLDDICT
    PUSHINT 64
    DICTIGET
    THROWIFNOT 100 ;global data dictionary is invalid
    PLDDICT
    PUSHINT 64
    DICTISET
    NEWC STDICT ENDC
    PUSH c7 SWAP
    TPUSH
    POP c7

    .globl cleanup_stack
    .type cleanup_stack, @function
cleanup_stack:
    PUSHINT $global-base$
    PUSH c7
    TPOP
    DROP
    POP c7

    .internal   :main_external
    ; s0 - msg body: slice
    ; s1 - msg: cell
    ; s2 - gram balance of msg: int
    ; s3 - gram balance of contract: int

    ;call signature checker (can throw exception if signature is invalid)
    CALL $:authenticate$ ;assume that function returns nothing
    
    ;call msg parser
    PUSH s1     ;push msg cell on top
    CALL $:parse_msg$    ;assume thar parser returns slice - dictionary with msg fields

    ;initializes global data dictionary in c7.1
    CALL $:init_stack$
    
    ;parse ABI version (1 byte) and load function id (4 bytes)
    LDU 32      ;load func id
    SWAP
    CALL 1      ;public method call

    CALL $cleanup_stack$

    .internal   :main_internal
    ; s0 - msg body: slice
    ; s1 - msg: cell
    ; s2 - gram balance of msg: int
    ; s3 - gram balance of contract: int
    
    ;call msg parser
    PUSH s1     ;push msg cell on top
    CALL $:parse_internal_msg$    ;assume thar parser returns slice - dictionary with msg fields
    
    ;initializes global data dictionary in c5
    CALL $:init_stack$

    POP s2
    DUP
    SDEMPTY
    IFRET
    ;parse ABI version (1 byte) and load function id (4 bytes)
    LDU 32      ;load func id
    SWAP
    CALL 1      ;public method call 

    CALL $cleanup_stack$

    .internal   :parse_msg
    CTOS        ;TODO: use parser from contract_api library

    .internal   :parse_internal_msg
    CTOS
